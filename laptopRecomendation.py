# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XuC7I3XmFdKg0Nxh9ak9W5rtBxBGnxj-
"""

!pip install opendatasets

import opendatasets as od
import pandas as pd


od.download(
    "https://www.kaggle.com/datasets/muhammetvarl/laptop-price")

"""## **Import Dataset**"""

import pandas as pd

laptop = pd.read_csv('/content/laptop-price/laptop_price.csv', encoding='latin-1')
laptop

laptop.info()

"""## Exploratory Data Analysis (EDA)**

Deskripsi Variabel

1. laptop_id : kode untuk identifikasi laptop
2. Company : Produsen laptop
3. Product : Merek dan Model nya
4. TypeName : Tipe laptop tersebut 
5. Inches : ukuran layar pada laptop tersebut
6. ScreenResolution : Resolusi Layar pada laptop tersebut
7. CPU : *Central Processing Unit* pada laptop tersebut
8. Ram : *Random Accces Memory* pada laptop tersebut
9. Memory : penyimpanan pada laptop tersebut
10. GPU : *Graphics Processing Units* pada laptop tersebut
11. OpSys : *Operating System* pada laptop tersebut
12. Weight : berat laptop tersebut
13. Price_euros : harga laptop tersebut berdasarkan mata uang euro
"""

#pengecekan apakah data yang kosong
laptop.isnull().sum()

#exploratory statistic information

laptop.describe()

"""dari hasil tersebut, dapat disimpulkan bahwa tidak ada missing values di data tersebut. karena ini merupakan rekomendasi laptop, maka disini saya akan merokemdasi kan laptop berdasarkan TypeName nya

"""

print("jumlah Type Name : ", len(laptop.TypeName.unique()))
print(laptop.TypeName.unique())

"""Dari hasil tersebut, dapat disimpulkan bahwa ada  6 tipe laptop"""

#melihat histogram berdasarkan jumlah TypeName
import seaborn as sns
import matplotlib.pyplot as plt
Typename_count = laptop['TypeName'].value_counts()

sns.barplot(x=Typename_count.values,
            y=Typename_count.index,
            palette='Set1').set_title('TypeName Count')


plt.show()

"""disini dapat disimpulkan bahwa Notebook memiliki jumlah terbanyak, sedangkan netbook memiliki jumlah paling sedikit

## Data Preparation
"""

#mari kita urutkan terlebih dahulu
prepare = laptop
prepare.sort_values('Product')

prepare = prepare.drop_duplicates('Product')
prepare

laptop_company = prepare['Company'].tolist()
laptop_product = prepare['Product'].tolist()
laptop_type = prepare['TypeName'].tolist()

print(len(laptop_company))
print(len(laptop_product))
print(len(laptop_type))

laptop_new = pd.DataFrame({
    'Company': laptop_company,
    'Product': laptop_product,
    'TypeName': laptop_type
})
laptop_new

"""## MODELING

selanjutnya adalah tahap modeling. Disini saya menggunakan content based filtering. lalu Disini saya menggunakan TF-IDF Vectorizer sebagai model yang digunakan untuk menemukan representasi fitur penting dari setiap typeName laptop
"""

data = laptop_new
data.sample(5)

from sklearn.feature_extraction.text import TfidfVectorizer
tf = TfidfVectorizer()
     
tf.fit(data['TypeName']) 
     
tf.get_feature_names_out()

tfidf_matrix = tf.fit_transform(data['TypeName'])

tfidf_matrix.shape

tfidf_matrix.todense()

"""## Cosine Similarity

. Sekarang, kita akan menghitung derajat kesamaan (similarity degree) antar laptop dengan teknik cosine similarity
"""

from sklearn.metrics.pairwise import cosine_similarity 

cosine_sim = cosine_similarity(tfidf_matrix) 
cosine_sim

cosine_sim_df = pd.DataFrame(cosine_sim, index=data['Product'], columns=data['Product'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(7, axis=1).sample(15, axis=0)

"""## Mendapatkan Rekomendasi

sekarang kini tibalah kita mendapatkan rekomendasi laptop untuk pengguna
"""

def laptop_recommendations(laptop_name, similarity_data=cosine_sim_df, items=laptop[['Company','Product', 'TypeName']], k=5):

        index = similarity_data.loc[:,laptop_name].to_numpy().argpartition(
            range(-1, -k, -1))
        
        closest = similarity_data.columns[index[-1:-(k+2):-1]]
        
        closest = closest.drop(laptop_name, errors='ignore')
     
        return pd.DataFrame(closest).merge(items).head(k)

find_laptop = data[data['Product'] == 'Latitude 3180']
find_laptop

laptop_type = 'Latitude 3180'
laptop_recomend = laptop_recommendations(laptop_type)
laptop_recomend.head(4)

"""Lihat, kita berhasil menemukan rekomendasi laptop yang sama dengan product tersebut

# Evaluation
"""

#simpan data laptop latitude 3180 pada variabel latitude
precision = data[data['Product'] == 'Latitude 3180']
precision

"""# Evaluation

disini saya mengunakan metrik evaluasi Precision
"""

get_laptop = []
for i in range(len(precision.TypeName)):
  for x in precision.TypeName.str.split(','):
    if x not in get_laptop:
      get_laptop.append(x)

for i in get_laptop[0]:
   print(i + ": " + str((
      (laptop_recomend['TypeName'].str.contains(i).count()/laptop_recomend['TypeName'].count())*100)
  ))